# --- Глобальные настройки ---
# Этот блок [agent] определяет общее поведение самого Telegraf.
[agent]
  # debug = false: Отключает режим отладки. Если поставить 'true', Telegraf будет выводить в лог
  # огромное количество подробной информации, что полезно для диагностики, но не для обычной работы.
  debug = false
  
  # Устанавливает значение тега 'host' для всех собираемых метрик.
  # Telegraf автоматически подставит сюда значение переменной окружения HOSTNAME,
  # которую мы задаем в скрипте запуска. Это позволяет различать, с какого сервера пришли метрики.
  hostname = "${HOSTNAME}"
  
  # interval = "10s": Глобальный интервал сбора метрик. Все плагины будут собирать
  # данные каждые 10 секунд, если для них не задан свой собственный интервал.
  interval = "10s"
  
  # round_interval = true: Выравнивает время сбора данных по интервалу.
  # Например, сбор будет происходить в 12:00:00, 12:00:10, 12:00:20, а не в 12:00:03, 12:00:13 и т.д.
  # Это делает графики более аккуратными.
  round_interval = true

# ===================================================================
# ВЫВОД: Настроен на отправку в наш vmagent
# Блок [[outputs.*]] определяет, КУДА Telegraf будет отправлять собранные данные.
# ===================================================================
[[outputs.http]]
  # Адрес назначения. В данном случае, метрики отправляются на сервис
  # с именем 'stud-agent' на порт 8429.
  # /api/v1/write — это стандартный эндпоинт для API Prometheus Remote Write.
  url = "http://stud-agent:8429/api/v1/write"
  
  # Указывает, что данные нужно отправлять в бинарном, высокоэффективном формате
  # совместимом с Prometheus и VictoriaMetrics.
  data_format = "prometheusremotewrite"

  # Максимальное время ожидания ответа от сервера перед тем,
  # как считать отправку неудачной.
  timeout = "30s"
  
  # Блок для установки кастомных HTTP-заголовков,
  # которые необходимы для формата prometheusremotewrite.
  [outputs.http.headers]
    # Указывает тип содержимого.
    Content-Type = "application/x-protobuf"
    # Указывает, что тело запроса сжато с помощью алгоритма Snappy для соответствия
    # форматов prometheusremotewrite
    Content-Encoding = "snappy"

# ===================================================================
# ВВОД: Что собирать 
# Блоки [[inputs.*]] определяют, КАКИЕ данные Telegraf будет собирать.
# ===================================================================

# Собирает статистику из таблицы отслеживания соединений ядра Linux (netfilter).
# Полезно для мониторинга NAT и файрвола.
[[inputs.conntrack]]

#  Собирает статистику по использованию CPU.
[[inputs.cpu]]
  # Собирать статистику для каждого ядра CPU по отдельности (cpu0, cpu1, ...).
  percpu = true
  # Собирать общую (среднюю) статистику по всем ядрам CPU.
  totalcpu = true
  
# Собирает информацию об использовании дискового пространства (свободно/занято).
[[inputs.disk]]
  # Игнорировать временные и виртуальные файловые системы,
  # которые не представляют интереса для мониторинга.
  ignore_fs = ["tmpfs", "devtmpfs"]
  
# Собирает статистику по операциям ввода/вывода на дисках (чтение/запись в сек/байт в сек).
[[inputs.diskio]]
  # Ограничивает сбор данных только определенными типами дисков
  # (sd* — обычно SATA/SAS/USB, nvme* — NVMe SSD).
  devices = ["sd*", "nvme*"]
  # Не добавлять серийный номер диска в теги, чтобы избежать создания слишком
  # большого количества уникальных метрик (высокой кардинальности).
  skip_serial_number = true
  
# Собирает метрики производительности (CPU, RAM, I/O) запущенных Docker-контейнеров.
[[inputs.docker]]
  # Указывает, как подключаться к Docker API. В данном случае,
  # через сокет-файл, путь к которому берется из переменной окружения DOCKER_SOCKET.
  endpoint = "unix://${DOCKER_SOCKET}"
  # Собирать метрики только для контейнеров в состоянии "running".
  container_state_include = ["running"]
  # Игнорировать ВСЕ метки (labels) контейнеров.
  # Это важная настройка для предотвращения "взрыва кардинальности", если метки динамические.
  docker_label_exclude = ["*"]
  # Исключает сбор указанных полей (полей с данными),
  # чтобы уменьшить объем передаваемой информации и убрать лишний "шум".
  fielddrop = ["container_id", "container_image", "container_name", "health_status", "container_status"]
  
# Собирает внутренние метрики о работе самого Telegraf
# (потребление памяти, количество собранных метрик, ошибки и т.д.). Очень полезно для отладки.
[[inputs.internal]]

# Собирает статистику по прерываниям CPU.
[[inputs.interrupts]]

# Собирает общую статистику ядра Linux (например, количество контекстных переключений).
[[inputs.kernel]]

# Собирает статистику из sysctl по файловой системе (например, количество открытых файлов).
[[inputs.linux_sysctl_fs]]

# Собирает статистику по использованию оперативной памяти (RAM).
[[inputs.mem]]

# Собирает статистику по сетевым интерфейсам (принято/отправлено байт, пакеты, ошибки).
[[inputs.net]]
  # Устаревшая опция, предписывающая не собирать статистику по протоколам (TCP, UDP),
  # так как теперь для этого есть более современный плагин nstat.
  ignore_protocol_stats = true
  
# Собирает статистику по TCP-соединениям в разных состояниях (ESTABLISHED, TIME_WAIT и т.д.).
[[inputs.netstat]]

# Более современный плагин для сбора детальной статистики по сетевым протоколам (TCP, UDP).
[[inputs.nstat]]
  # Сообщать о значениях, даже если они равны нулю.
  dump_zeros = true
  
# Собирает статистику по количеству процессов в системе (всего, запущенных, спящих, зомби).
[[inputs.processes]]

# Собирает статистику по использованию файла/раздела подкачки (swap).
[[inputs.swap]]

# Собирает общую системную информацию, такую как load average и uptime.
[[inputs.system]]
  # Исключает поле 'uptime_format' (например, "2 days, 3 hours"),
  # оставляя только 'uptime' в виде количества секунд.
  fielddrop = ["uptime_format"]
