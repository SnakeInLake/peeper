# Все параметры здесь применяются ко всему процессу HAProxy.
global
  # Направляем все логи на стандартный вывод (чтобы видеть их через 'docker logs').
  log stdout format raw local0 info
  # Запускаем HAProxy в режиме "мастер-процесс + рабочие процессы", это стандарт для стабильности.
  master-worker
  # После запуска, основной процесс сменит своего пользователя на 'haproxy'.
  user haproxy
  # И свою группу на 'haproxy'. (Понижение привилегий для безопасности).
  group haproxy

  # Создаем специальный сокет для управления HAProxy (например, для просмотра статистики командами).
  stats socket /var/run/haproxy/haproxy.sock mode 660 level admin expose-fd listeners
  # Устанавливаем таймаут для команд, отправленных через этот сокет.
  stats timeout 30s

  # Указываем современные и безопасные наборы шифров для TLS 1.3.
  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  # Устанавливаем глобальные опции для SSL: минимальная версия TLS 1.2, отключаем "tls tickets" для большей безопасности.
  ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

# Параметры здесь будут применены ко всем frontend и backend секциям, если они не переопределены там.
defaults
  # Используем глобальные настройки логирования.
  log global
  # Работаем в режиме HTTP-прокси (уровень 7).
  mode http
  # Включаем специальный, более детальный формат логов для HTTP.
  option httplog
  # Не логируем "пустые" соединения (например, от health-check'ов).
  option dontlognull
  # Добавляем заголовок X-Forwarded-For, чтобы бэкенд-сервера знали реальный IP клиента.
  option forwardfor
  # Таймаут на установку соединения с бэкенд-сервером.
  timeout connect 5s
  # Таймаут неактивности со стороны клиента (браузера).
  timeout client  50s
  # Таймаут неактивности со стороны бэкенд-сервера (Grafana, VictoriaMetrics).
  timeout server  50s

# Эта секция учит HAProxy, как находить IP-адреса по именам сервисов в Docker.
resolvers docker
  # Указываем HAProxy использовать встроенный DNS-сервер Docker (всегда 127.0.0.11:53).
  nameserver dns 127.0.0.11:53
  # Количество попыток разрешить имя, если первая не удалась.
  resolve_retries 3
  # Таймаут на одну попытку разрешения имени.
  timeout resolve 1s
  # Таймаут между повторными попытками.
  timeout retry   1s
  # Как долго хранить в кэше удачно разрешенное имя (IP-адрес).
  hold valid      10s

# --- ОСНОВНОЙ ВХОДНОЙ ИНТЕРФЕЙС ("ВИТРИНА") ---
# Секция, которая принимает весь входящий трафик от пользователей.
frontend https_frontend
  # Слушаем на порту 80 для обычного HTTP-трафика.
  bind :80
  # Слушаем на порту 443 для HTTPS-трафика, используя указанный SSL-сертификат и включая поддержку HTTP/2 (alpn h2).
  bind :443 ssl crt /usr/local/etc/ssl/private/my_own_server.pem alpn h2,http/1.1  

  # Правило: перенаправлять весь HTTP-трафик на HTTPS.
  # "unless { ssl_fc }" означает "выполнить, только если соединение НЕ является SSL".
  http-request redirect scheme https unless { ssl_fc }

  # Правило маршрутизации: создаем "условие" (ACL) с именем 'metrics_url'.
  # Оно будет истинным, если путь в URL начинается с '/metrics/' (без учета регистра).
  acl metrics_url path_beg -i /metrics/
  # Используем бэкенд 'metrics_backend', если условие 'metrics_url' истинно.
  use_backend metrics_backend if metrics_url

  # Если ни одно из правил выше не сработало, отправляем трафик на этот бэкенд по умолчанию.
  default_backend grafana_backend

# --- ВХОДНОЙ ИНТЕРФЕЙС ДЛЯ СТАТИСТИКИ ---
# Отдельная "витрина" на другом порту для служебных целей.
frontend stats_frontend
  # Слушаем на порту 8404.
  bind :8404
  # Правило: если кто-то обращается по пути /metrics, использовать встроенный prometheus-exporter.
  http-request use-service prometheus-exporter if { path /metrics }

  # Включаем встроенную веб-страницу со статистикой.
  stats enable
  # Устанавливаем адрес, по которому будет доступна страница статистики.
  stats uri /stats
  # Как часто обновлять данные на странице.
  stats refresh 10s
  # Устанавливаем логин и пароль для доступа к странице статистики.
  stats auth admin:YourSecretPassword_ChangeMe!

# --- БЭКЕНД ДЛЯ GRAFANA ---
# Группа серверов, которые обрабатывают трафик для Grafana.
backend grafana_backend
  # Устанавливаем алгоритм балансировки нагрузки: по кругу (Round Robin).
  balance roundrobin
  # Определяем один сервер в этой группе. 'check' включает проверку его доступности.
  # 'resolvers docker' говорит HAProxy использовать наш DNS-резолвер для поиска IP по имени 'stud-grafana'.
  server grafana1 stud-grafana:3000 check resolvers docker

# --- БЭКЕНД ДЛЯ VICTORIAMETRICS ---
# Группа серверов для VictoriaMetrics.
backend metrics_backend
  # Устанавливаем алгоритм балансировки: по кругу.
  balance roundrobin
  # Правило: перед отправкой запроса на бэкенд, изменить путь в URL.
  # Оно отрезает '/metrics' из начала пути. Например, /metrics/api/v1/write -> /api/v1/write.
  http-request replace-path /metrics(/)?(.*) /\2
  # Определяем сервер VictoriaMetrics, используя наш DNS-резолвер.
  server victoria my-victoria-metrics:8428 check resolvers docker
