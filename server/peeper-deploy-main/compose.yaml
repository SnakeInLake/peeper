---
name: "stud"

x-logging: &logging
  driver: "json-file"
  options:
    compress: "true"
    max-file: "5"
    max-size: "50m"

services:
  stud-grafana:
    image: "grafana/grafana:9.5.1"
    container_name: "stud-grafana"
    hostname: "stud-grafana"
    restart: "unless-stopped"
    networks:
      - internal
      - external
    volumes:
      # Том для хранения настроек Grafana (пользователи, алерты и т.д.)
      - "stud-grafana-data:/var/lib/grafana:rw"
      # Том для автоматического создания источников данных
      - "./my-grafana-provisioning/datasources:/etc/grafana/provisioning/datasources:ro"
      # Том с файлом-инструкцией, где искать дашборды
      - "./my-grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro"
      # Том с самими файлами дашбордов
      - "./my-grafana-provisioning/dashboard_files:/etc/grafana/provisioning/dashboard_files:ro"
    environment:
      GF_SECURITY_ADMIN_USER: "${STUD_USERNAME}"
      GF_SECURITY_ADMIN_PASSWORD: "${STUD_PASSWORD}"
      GF_SERVER_ROOT_URL: "http://stud-grafana:3000"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      TZ: "${TIMEZONE}"
      # Указываем Grafana, какой плагин нужно скачать и установить при старте.
      GF_INSTALL_PLUGINS: "victoriametrics-metrics-datasource"
      # Разрешаем загрузку неподписанных плагинов (хорошая практика)
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "victoriametrics-metrics-datasource"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:3000/api/health"]
      interval: "10s"
      timeout: "5s"
      retries: "20"
    logging: *logging


  my-victoria-metrics:
    build: ./my-victoria-metrics
    container_name: "my-victoria-metrics"
    hostname: "my-victoria-metrics"
    environment:
      DOCKER_HOST: "${HOSTNAME}"
      DOCKER_SOCKET: "${DOCKER_SOCKET}"
      RETENTION_PERIOD: "${RETENTION_PERIOD}"
      TZ: "${TIMEZONE}"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8428/-/healthy"]
      interval: "5s"
      timeout: "5s"
      retries: "10"
    user: "root"
    privileged: true           
    restart: "unless-stopped"
    networks:
      - internal
      - external
    ports:
      - "8428:8428"
    volumes:
      - "my-victoria-metrics-data:/victoria-metrics-data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./my-victoria-metrics/configs/metrics.yaml:/etc/victoria-metrics/metrics.yaml:ro"
      - "./my-victoria-metrics/configs/docker.yaml:/etc/victoria-metrics/configs/docker.yaml:ro"
    command:
      - '--storageDataPath=/victoria-metrics-data'
      - '--retentionPeriod=30d'
    # Этот флаг теперь указывает на правильный путь внутри контейнера
      - '--promscrape.config=/etc/victoria-metrics/metrics.yaml'

  my-proxy:
    build: ./my-haproxy
#    image: my-haproxy:latest # <-- Используем наш собранный вручную образ 
    container_name: "my-proxy"
    hostname: "my-proxy"
    restart: "unless-stopped"
    depends_on:
      my-victoria-metrics:
        condition: "service_healthy"
      stud-grafana: # Добавим зависимость от Графаны
        condition: "service_healthy"
    networks:
      - external
      - internal
    ports:
      # Пробрасываем 80 и 443 порт. ${STUD_PORT} скорее всего 443
      - "0.0.0.0:80:80" 
      - "0.0.0.0:${STUD_PORT}:443"
    volumes:
      # Пути оставляем те же, но убедимся, что конфиг наш
      - "./my-haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro" 
      - "./certificates/crt:/usr/local/etc/ssl/private:ro"
      - "./my-haproxy/entrypoint.sh:/docker-entrypoint.sh:ro"
    logging: *logging
    environment:
      TZ: "${TIMEZONE}"
    # Healthcheck можно упростить или оставить
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://127.0.0.1/health"]
      interval: "30s"
      timeout: "10s"
      retries: "3"

  my-own-server-provisioner:
    container_name: "my-own-server-provisioner"
    build: ./my-own-server-provisioner 
    depends_on:
      stud-grafana:
        condition: "service_healthy"
    networks:
      - internal
    restart: "on-failure"
    environment:
      GRAFANA_TOKEN: "${STUD_TOKEN}"
    volumes:
      # Монтируем ОРИГИНАЛЬНУЮ папку с системными дашбордами
      - "./provisioning/dashboards/system:/dashboards/system:ro"
#    entrypoint: /bin/sh
 #   command: -c "echo 'Container is in sleep mode. Attach with docker exec.' && sleep infinity"    
#      - "./test-dashboard.json:/dashboards/test-dashboard.json:ro"

  my-telegraf-agent: 
    image: "telegraf:1.29-alpine"
    container_name: "my-telegraf-agent"
    hostname: "my-telegraf-agent"
    restart: "unless-stopped"
    depends_on:
      my-victoria-metrics:
        condition: "service_healthy"
    networks:
      - internal
    volumes:
      - "./my-telegraf-config/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
      - "/:/hostfs:ro"
      - "/run/udev:/run/udev:ro"
      - "${DOCKER_SOCKET}:${DOCKER_SOCKET}:ro"
    privileged: true 
    user: "telegraf:${DOCKER_GID}" 
    logging: *logging
    environment:
      AGENT_HOST: "my-victoria-metrics"
      AGENT_PORT: "8428"
      DOCKER_HOST: "${HOSTNAME}"
      DOCKER_SOCKET: "${DOCKER_SOCKET}"
      HOST_ETC: "/hostfs/etc"
      HOST_MOUNT_PREFIX: "/hostfs"
      HOST_PROC: "/hostfs/proc"
      HOST_RUN: "/hostfs/run"
      HOST_SYS: "/hostfs/sys"
      HOST_VAR: "/hostfs/var"
      TZ: "${TIMEZONE}"

networks:
  external:
    name: "external"
    driver: "bridge"
  internal:
    name: "internal"
    driver: "bridge"
    internal: true

volumes:
  stud-grafana-data:
    name: "stud-grafana-data"
  stud-metrics-data:
    name: "stud-metrics-data"
  stud-provision-data:
    name: "stud-provision-data"
  my-victoria-metrics-data:
    name: "my-victoria-metrics-data"
