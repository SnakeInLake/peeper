---
name: "peeper"

x-logging: &logging
  driver: "json-file"
  options:
    compress: "true"
    max-file: "5"
    max-size: "50m"

services:
  # --- НАША НОВАЯ "ЧИСТАЯ" GRAFANA ---
  peeper-grafana:
    image: "grafana/grafana:9.5.1"
    container_name: "peeper-grafana"
    hostname: "peeper-grafana"
    restart: "unless-stopped"
    networks:
      - internal
      - external
    volumes:
      # Том для хранения настроек Grafana (пользователи, алерты и т.д.)
      - "peeper-grafana-data:/var/lib/grafana:rw"
      # Том для автоматического создания источников данных
      - "./my-grafana-provisioning/datasources:/etc/grafana/provisioning/datasources:ro"
      # Том с файлом-инструкцией, где искать дашборды
      - "./my-grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro"
      # Том с самими файлами дашбордов
      - "./my-grafana-provisioning/dashboard_files:/etc/grafana/provisioning/dashboard_files:ro"
    environment:
      GF_SECURITY_ADMIN_USER: "${PEEPER_USERNAME}"
      GF_SECURITY_ADMIN_PASSWORD: "${PEEPER_PASSWORD}"
      GF_SERVER_ROOT_URL: "http://peeper-grafana:3000"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      TZ: "${TIMEZONE}"
      # Указываем Grafana, какой плагин нужно скачать и установить при старте.
      GF_INSTALL_PLUGINS: "victoriametrics-metrics-datasource"
  
      # Разрешаем загрузку неподписанных плагинов (хорошая практика)
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "victoriametrics-metrics-datasource"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:3000/api/health"]
      interval: "10s"
      timeout: "5s"
      retries: "20"
    logging: *logging


  my-victoria-metrics:
    build: ./my-victoria-metrics
    container_name: "my-victoria-metrics"
    hostname: "my-victoria-metrics"
    environment:
      DOCKER_HOST: "${HOSTNAME}"
      DOCKER_SOCKET: "${DOCKER_SOCKET}"
      RETENTION_PERIOD: "${RETENTION_PERIOD}"
      TZ: "${TIMEZONE}"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8428/-/healthy"]
      interval: "5s"
      timeout: "5s"
      retries: "10"
    user: "root" # <-- Нужно для доступа к сокету Docker
    restart: "unless-stopped"
    networks:
      - internal
    ports:
      - "8428:8428"
    volumes:
      - "my-victoria-metrics-data:/victoria-metrics-data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./my-victoria-metrics/configs/metrics.yaml:/etc/victoria-metrics/metrics.yaml:ro"
      - "./my-victoria-metrics/configs/docker.yaml:/etc/victoria-metrics/configs/docker.yaml:ro"
    
    command:
      - '--storageDataPath=/victoria-metrics-data'
      - '--retentionPeriod=30d'
    # Этот флаг теперь указывает на правильный путь внутри контейнера
      - '--promscrape.config=/etc/victoria-metrics/metrics.yaml'

#  peeper-metrics:
 #   image: "${PEEPER_REGISTRY}/peeper/peeper-metrics:${PEEPER_VERSION}"
  #  container_name: "peeper-metrics"
   # hostname: "peeper-metrics"
#    restart: "unless-stopped"
 #   networks:
  #    - internal
   # volumes:
    #  - "${DOCKER_SOCKET}:${DOCKER_SOCKET}:ro"
     # - "peeper-metrics-data:/data:rw"
#    user: "root:${DOCKER_GID}"
 #   healthcheck:
  #    test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8428/-/healthy"]
   #   interval: "5s"
    #  timeout: "5s"
     # retries: "10"
    #logging: *logging
    #environment:
     # DOCKER_HOST: "${HOSTNAME}"
      #DOCKER_SOCKET: "${DOCKER_SOCKET}"
#      RETENTION_PERIOD: "${RETENTION_PERIOD}"
 #     TZ: "${TIMEZONE}"

  peeper-proxy:
    image: "${PEEPER_REGISTRY}/peeper/peeper-proxy:${PEEPER_VERSION}"
    container_name: "peeper-proxy"
    hostname: "peeper-proxy"
    restart: "unless-stopped"
    depends_on:
      my-victoria-metrics:
        condition: "service_healthy"
    networks:
      - external
      - internal
    ports:
      - "0.0.0.0:${PEEPER_PORT}:443"
    volumes:
      - "./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro" 
      - "./certificates/crt:/usr/local/etc/ssl/private:ro"
    logging: *logging
    environment:
      TZ: "${TIMEZONE}"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1/health"]
      interval: "5s"
      timeout: "5s"
      retries: "10"
 




  my-own-server-provisioner:
    container_name: "my-own-server-provisioner"
    build: ./my-own-server-provisioner 
    depends_on:
      peeper-grafana:
        condition: "service_healthy"
    networks:
      - internal
    restart: "on-failure"
    environment:
      GRAFANA_TOKEN: "${PEEPER_TOKEN}"
    volumes:
      # Монтируем ОРИГИНАЛЬНУЮ папку с системными дашбордами
      - "./provisioning/dashboards/system:/dashboards/system:ro"
#    entrypoint: /bin/sh
 #   command: -c "echo 'Container is in sleep mode. Attach with docker exec.' && sleep infinity"    
#      - "./test-dashboard.json:/dashboards/test-dashboard.json:ro"

    
#  peeper-provision:
 #   image: "${PEEPER_REGISTRY}/peeper/peeper-provision:${PEEPER_VERSION}"
  #  container_name: "peeper-provision"
   # hostname: "peeper-provision"
   # depends_on:
    #  peeper-grafana:
     #   condition: "service_healthy"
  #    peeper-proxy:
   #     condition: "service_healthy"
  #  environment:
   #   PEEPER_PORT: "${PEEPER_PORT}"
    #  TZ: "${TIMEZONE}"
 #   extra_hosts:
  #    - "host.docker.internal:host-gateway"
  #  logging: *logging
   # networks:
#      - external
 #   volumes:
  #    - "./provisioning:/provisioning:ro"
   #   - "peeper-provision-data:/data:rw"



  peeper-telegraf:
    image: "${PEEPER_REGISTRY}/peeper/peeper-telegraf:${PEEPER_VERSION}"
    container_name: "peeper-telegraf"
    hostname: "peeper-telegraf"
    restart: "unless-stopped"
    depends_on:
      my-victoria-metrics:
        condition: "service_healthy"
    networks:
      - internal
    volumes:
      - "./telegraf.conf:/etc/telegraf/telegraf.conf:ro"
      - "/:/hostfs:ro"
      - "/run/udev:/run/udev:ro"
      - "${DOCKER_SOCKET}:${DOCKER_SOCKET}:ro"
    privileged: true
    user: "telegraf:${DOCKER_GID}"
    logging: *logging
    environment:
      AGENT_HOST: "my-victoria-metrics"
      AGENT_PORT: "8428"
      DOCKER_HOST: "${HOSTNAME}"
      DOCKER_SOCKET: "${DOCKER_SOCKET}"
      HOST_ETC: "/hostfs/etc"
      HOST_MOUNT_PREFIX: "/hostfs"
      HOST_PROC: "/hostfs/proc"
      HOST_RUN: "/hostfs/run"
      HOST_SYS: "/hostfs/sys"
      HOST_VAR: "/hostfs/var"
      TZ: "${TIMEZONE}"

  #my-telegraf-agent:
   # image: "telegraf:1.28-alpine" 
    #container_name: "my-telegraf-agent"
 #   hostname: "my-telegraf-agent"
  #  restart: "unless-stopped"
   # depends_on:
    #  my-victoria-metrics: 
     #   condition: "service_healthy"
  
    #volumes:
     # - "./my-telegraf-config/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
      #- "/:/hostfs:ro"
    #  - "/run/udev:/run/udev:ro" 
     # - "${DOCKER_SOCKET}:${DOCKER_SOCKET}:ro"
  
 #   privileged: true
  #  user: "telegraf:${DOCKER_GID}"
   # networks:
    #  - internal
    #logging: *logging
  
#    environment:
 #     DOCKER_HOST: "${HOSTNAME}" 
  #    DOCKER_SOCKET: "${DOCKER_SOCKET}" 
   # 
    #  AGENT_HOST: "my-victoria-metrics" 
     # AGENT_PORT: "8428"
    
 #     HOST_ETC: "/hostfs/etc"
  #    HOST_MOUNT_PREFIX: "/hostfs"
   #   HOST_PROC: "/hostfs/proc"
     # HOST_RUN: "/hostfs/run"
    #  HOST_SYS: "/hostfs/sys"
     # HOST_VAR: "/hostfs/var"
    #  TZ: "${TIMEZONE}"


networks:
  external:
    name: "external"
    driver: "bridge"
  internal:
    name: "internal"
    driver: "bridge"
    internal: true

volumes:
  peeper-grafana-data:
    name: "peeper-grafana-data"
  peeper-metrics-data:
    name: "peeper-metrics-data"
  peeper-provision-data:
    name: "peeper-provision-data"
  my-victoria-metrics-data:
    name: "my-victoria-metrics-data"
